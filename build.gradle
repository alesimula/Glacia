buildscript {
    ext.kotlin_version = '1.3.40'
    ext.forgelin_version = '1.8.3'

    repositories {
        google()
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://plugins.gradle.org/m2/"}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
        //classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0'
group = 'com.greenapple.glacia'
archivesBaseName = 'Glacia'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

minecraft {
    mappings channel: 'snapshot', version: '20190621-1.14.2'
    
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
    maven {url 'http://dogforce-games.com/maven'}
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.14.4-28.0.11'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

project.tasks.build.dependsOn project.tasks.shadowJar
reobf {
    jar{}
}
project.tasks.reobfJar.mustRunAfter shadowJar
//I make sure the Jar file generated by this task has the same name as the original one to override it
shadowJar {
    mustRunAfter jar
    String embeddedPackage = "${project.group}.embedded"
    classifier ''
    //baseName = "$archivesBaseName-packedKotlin"
    version = "$project.version"

    mergeServiceFiles()
    dependencies {
        include(dependency('org.jetbrains.kotlin:.*'))
        relocate 'kotlin', "${embeddedPackage}.kotlin"
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url = "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}